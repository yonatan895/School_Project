<resources>
    <string name="app_name">School_app</string>
    <string name="introduction">Hello, and welcome to the Java Learning program!
                                I am honored that you have decided to choose this app to learn
                                the interesting features of the Java language.
    </string>
    <string name="email">Email</string>
    <string name="_0">0</string>
    <string name="sign_out">Sign out</string>
    <string name="view_leaderboard">View Leaderboard</string>
    <string name="username">Username</string>
    <string name="average_accuracy">Average Accuracy</string>
    <string name="view_chart">view chart</string>
    <string name="leaderboard_button_text">Leaderboard</string>
    <string name="chart_button_text">Progress chart</string>
    <string name="nav_open">Open</string>
    <string name="nav_close">Close</string>
    <string name="history_bullet_pt">
        • Origin\n
        • About java\n
        • Advantages over C/C++\n
        • Java packages\n
        • Java community process\n
    </string>
    <string name="java_eco_pt">
         • Integrated development environment (IDE)\n
         • Libraries\n
         • The Java Development Kit\n

    </string>
    <string name="ide_pt">
         • <a href="https://eclipse.org">Eclipse</a>- Open-source project by the Eclipse foundation\n
         • <a href="https://netbeans.apache.org">NetBeans</a>- Sun\'s (now Oracle\'s) open-source Java IDE\n
         • <a href="https://jetbrains.com/idea">Intellij Idea</a>- A commercial IDE with a community edition\n
    </string>
    <string name="cover_following"> We\'ll cover the following</string>
    <string name="history_origin">Java was first developed in the 90\’s by James Gosling. It borrows much of its syntax from C and C++ to be more appealing to existing programmers at the time. Java was owned by Sun Microsystems, which was then acquired by Oracle in 2010.
</string>
    <string name="about_java">Java is a statically typed, object-oriented language. <b>Statically typed</b> means every variable and parameter must have a defined type (as opposed to languages like JavaScript, which are dynamically typed). <b>Object-oriented (OO)</b> means that data and functions are grouped into objects, which are usually referred to as methods in OO languages.
    </string>
    <string name="adv_over_c">Java code is compiled to byte-code, which runs on a virtual machine (the <b>Java Virtual Machine</b> or JVM). The virtual machine handles garbage collection and allows Java to be compiled and run on any OS or hardware with a JVM.\n
        \nThis is an advantage over C/C++, which must be compiled directly to machine code and has no automatic garbage collection (the programmer needs to allocate and deallocate memory).
</string>
    <string name="java_packages">The standard implementation of Java comes in two different packages: the <b>JRE</b> (Java Runtime Environment) and the <b>JDK</b> (Java Development Kit). The JRE is strictly for running Java as an end-user, while the JDK is for developing Java code. The JDK comes with the <font color="#FF4081">javac</font> command for compiling Java code to byte-code among other things.
    </string>
    <string name="java_com_proc">To make Java more open and community-based, Sun Microsystems started the Java community process (JCP), which allows a somewhat democratic evolution of Java and JVM specifications.\n
\nAlso, Sun relicensed most of its Java technologies under the GNU General Public License in May 2007, resulting in multiple open-source implementations of the JVM. OpenJDK is the current official implementation.
</string>
    <string name="eco_ide">The Java ecosystem is huge. It is mainly composed of JVM\’s, libraries, tools, and IDE\’s. The three most popular IDE\’s, in no particular order, are :
</string>
    <string name="eco_lib">Following are some of the most promising new libraries and tools in the Java ecosystem:
</string>
    <string name="lib_list">
        • Maven, Gradle, and other build tools\n
        • Libraries for concurrent programming\n
        • JUnit, Spock, and other test frameworks\n
        • Groovy, Scala, and other JVM languages\n
        • Grails, Play, and other web frameworks\n
        • JVM Cloud providers\n
    </string>
    <string name="eco_jdk">The core class type included in Java is called the JDK. It includes all the basic tools we would need in a modern application, including everything from collection types and queues, to web sockets, to files and image processing. It can be found <a href="https://www.oracle.com/java/technologies/downloads/">here</a>.\n
        \nAs an object-oriented language, methods and properties are organized into classes that are organized in packages. Each Java class should be defined in one file named for that class. The classes under <font color="#FF4081">java.lang</font>, such as <font color="#FF4081">String</font>, are always available. Otherwise, we would need to explicitly import the classes using an import statement at the top of our Java file. An instance of a class is called an <b>object</b>. All objects are passed by value. Unlike in C, we cannot modify a reference pointer.
</string>
    <string name="prim_info">A particular aspect of Java is that there are special types called <b>primitives</b>. Unlike objects, primitives do not have methods and always have a value. In other words, they can never be <font color="#FF4081">null</font>.
</string>

    <string name="struct_pt">
        • What to expect?\n
        • Organization of the course
    </string>
    <string name="struct_expect">This course should help you understand the latest in Java features, up to version 17. </string>
    <string name="course_org">This is an intermediate-level course designed to introduce you to different Java versions and libraries for software development.\n
        \n To overview, the course can be divided into two categories:
</string>

    <string name="categories"><b>Java</b>: From chapter "Introduction to chapter "Java 10-17."\n
        \t• Java syntax and conventions
        \t• Java 5-12\n
        \n <b>Java Ecosystem</b>: From chapter "Java Ecosystem to chapter "Modern Java concurrency"\n
        \t• Using essential libraries, and using concurrency
    </string>
    <string name="prim_cover_pt">
        • Primitives\n
        • Arrays\n
    </string>
    <string name="prim_types">Java has eight primitive types:\n
        \n
        • <font color="#FF4081">byte</font>: A number from -128 to 127 (8 bits). This is typically a way to store or transmit raw data.\n
        • <font color="#FF4081">short</font>: A 16-bit signed integer. It has a maximum value of around 32,000, precisely 32,767.\n
        • <font color="#FF4081">int</font>: A 32-bit signed integer. Its maximum is around 2^31\n
        • <font color="#FF4081">long</font>: A 64-bit signed integer. It has a maximum of 2^63\n
        • <font color="#FF4081">float</font>: A 32-bit floating point number. This is a non-precise value that is used for things like simulations.\n
        • <font color="#FF4081">double</font>:  It’s like a float but with 64-bits.\n
        • <font color="#FF4081">boolean</font>: It has only two possible values: true and false (much like a bit).\n
        • <font color="#FF4081">char</font>: A single character, such as “A” (the letter A).\n
        \n
        These are the only types that can be declared as <font color="#FF4081">var</font>. Other types must be explicitly declared. For example, <font color="#FF4081">var x = new ArrayList&lt;String&gt;()</font> is illegal, but <font color="#FF4081">var x = new ArrayList&lt;String&gt;()</font> is legal.
    </string>
    <string name="arr_desc">In Java, we can define arrays of primitives or classes. For example, <font color="#FF4081">String[] strArray = {"a", "b", "c"};</font> creates an array of three <font color="#FF4081">Strings</font>. Once we define an array, we cannot directly change its length. If we need a list of expanding size, we can instead use <font color="#FF4081">java.util.ArrayList</font>.
</string>
    <string name="arr_demo">"public class main {
  public static void main(String[] args) {
    String[] strArray = {"a", "b", "c"}; //declaring an array
    for (String element: strArray) {
        System.out.println(element); //printing it element wise
    }
  }
}
"</string>

    <string name="arr_example">In this program, we declare an array <font color="#FF4081">strArrray</font> with strings <font color="#FF4081">"a", "b"</font>, and <font color="#FF4081">"c"</font>. The <font color="#FF4081">for</font> loop is used to print the elements one-by-one. We can also print the whole array with the <font color="#FF4081">System.out.println(Arrays.toString(array))</font> command.
</string>

    <string name="class_pt">
        • Defining a Java class
        • Properties and methods
    </string>

    <string name="class_def">To define a new class, create a new file named <font color="#FF4081">Classname.java</font>. For example, to create a <font color="#FF4081">Dragon</font> class, we will first create a file named <font color="#FF4081">Dragon.java</font>, as shown in the following code:
</string>

    <string name="class_demo">import java.util.*;\n
public class Dragon{\n
    // class variables\n

    public static void main(String[] args) {\n
        // driver code\n
    }\n


}
</string>
<string name="class_explain">
In this case, the class does not have a package. If it did, we would have declared it in the first line and stored the file in the same directory structure of the package.\n
        \nThe first line above imports everything in the <font color="#FF4081">java.util package</font>. This includes <font color="#FF4081">List, ArrayList, Map</font>, and <font color="#FF4081">HashMap</font> example. Then, we declare a “<font color="#FF4081">Dragon</font>” class. The above code will output “<font color="#FF4081">Succeeded</font>” since there are no functions for the driver code to print anything else.
</string>

    <string name="class_next">Next, we might want to add some properties and methods to our class. A <b>property</b> is a value associated with a particular object. A <b>method</b> is a block of code in a class.
</string>

    <string name="class_small_code">
        public class SmallClass {\n
    String name; \n
    String getname() {return name;}\n
    void print() {System.out.println(name);}\n


    public static void main(String[] args) {\n
        SmallClass c = new SmallClass();\n
        c.name = "Henry";\n
        System.out.println(c.getname());\n
        c.print();\n
    }\n
}
    </string>

    <string name="class_above">In the above code, <font name="#FF4081">name</font> is a <font color="#FF4081">String property</font>, and <font color="#FF4081">getName</font> and print are methods. The method getName returns a String (the name) and <font color="#FF4081">print</font> uses the built-in <font color="#FF4081">System</font> class to print out the name to the standard output stream.\n
Let’s make a simple class below!
</string>

        <string name="class_exercise">
            public class Dragon {\n
        // class variables\n
        String name;\n
        int age;\n
        String color;\n
        String type;\n
        String getname() {return name;}\n
        void print() {System.out.println(name);}\n
        void printAll() {System.out.println(name + " " + age + " " + color + " " + type);}\n

        public static void main(String[] args) {\n
            // driver code\n
            Dragon d = new Dragon();\n
            d.name = "Henry";\n
            d.age = 10;\n
            d.color = "red";\n
            d.type = "fire";\n
            System.out.println(d.getname());\n
            d.print();\n
            d.printAll();\n
        }\n
    }
        </string>

        <string name="class_exercise_explain">In this exercise, we create a class called <font color="#FF4081">Dragon</font> with four properties: <font color="#FF4081">name, age, color, type</font>. We also create three methods: <font color="#FF4081">getName</font>, <font color="#FF4081">print</font>, and <font color="#FF4081">printAll</font>. The <font color="#FF4081">printAll</font> method prints out all the properties of the dragon. The driver code creates a new dragon and sets its properties. Then, it prints out the name, prints out the name, and prints out all the properties.

        </string>
    <string name="comment_explain">As a human, it is sometimes useful for us to leave notes in our source code for other humans and even for ourselves. We call these notes <b>comments</b>, and we write them in the following manner:
</string>

    <string name="comment_demo">
        // This is a single-line comment\n
        /* This is a multi-line comment */\n
        /** This is a JavaDoc comment */\n
    </string>

    <string name="comment_explain2">The first two types of comments are used to comment out a single line or multiple lines of code. The third type of comment is used to document a class or method.</string>

    <string name="java5_pt">
       • Generics
        • Annotations
        • More concise for loops
        • Static Import
        • Autoboxing, Enums, and Varargs

    </string>

    <string name="generics"><b>Generics</b> were a huge addition to the language. Although it improved the type-safety of Java, it also increased the complexity of the language.\n
\nGenerics are most commonly used to specify what type a Collection holds. This reduces the need for casting and improves type safety. For example, we can declare a list of strings in the following manner:
</string>

    <string name="map_long">Declaring a map of <font color="#FF4081">long</font> to <font color="#FF4081">String</font> would appear like the following:
</string>

    <string name="generic_explain">The generic type needs to be repeated twice in the declaration, which receives a lot of criticism. However, various libraries such as Google’s guava make this less painful by using static methods. For example, declaring the above map would be as simple as the following:
</string>
    
    <string name="anno_explain">Java <b>annotations</b> allow us to add meta-information to Java code that can be used by the compiler, various APIs, or even by our own code at runtime.\n
        \nThe most common annotation we will see is the <font color="#FF4081">@Override</font> annotation, which declares that we are overriding a method to the compiler. For example, this is useful because it will cause a compile-time error if we mistype the method name.\n
        \nOther useful annotations are those in <font color="#FF4081">javax.annotation</font> such as <font color="#FF4081">@Nonnull</font> and <font color="#FF4081">@Nonnegative</font>, which declare our intentions.\n
        \nTo reduce “wiring” code, annotations such as <font color="#FF4081">@Autowired</font> and <font color="#FF4081">@Inject</font> are used by direct-injection frameworks like Spring and Google Guice, respectively.
</string>


</resources>